/**
 * @file parser.h
 * @brief Этот файл содержит определения структур и функций для парсинга
 * 3D-моделей из файлов.
 *
 * Функции предназначены для чтения данных о вершинах и гранях модели из файла,
 * а также для хранения этих данных в соответствующих структурах. 
 * Модель представлена структурой, содержащей информацию о вершинах и гранях,
 * включая максимальные и минимальные координаты для дальнейшей обработки.
 */

#ifndef PARSER_H
#define PARSER_H

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

/**
 * @struct Polygon
 * @brief Структура для хранения информации о грани модели.
 *
 * Структура Polygon содержит массив номеров вершин, составляющих грань, 
 * и количество этих вершин. Это позволяет эффективно управлять 
 * геометрической информацией о модели.
 */
typedef struct {
    int *numbers_of_vertices;   ///< Массив номеров вершин грани.
    int count_of_vertices;      ///< Количество вершин грани.
} Polygon; 

/**
 * @struct Model
 * @brief Структура для представления 3D-модели.
 *
 * Структура Model содержит массив вершин, массив полигонов, общее количество 
 * вершин и граней, а также максимальные и минимальные координаты модели. 
 * Эти данные используются для отображения и обработки модели в 3D-пространстве.
 */
typedef struct {
    double *vertices; ///< Массив координат вершин модели.
    Polygon *polygons; ///< Массив граней модели.
    unsigned int total_vertices;  ///< Общее количество вершин.
    unsigned int total_polygons;  ///< Общее количество граней.
    double max[3]; ///< Максимальные координаты (x, y, z).
    double min[3]; ///< Минимальные координаты (x, y, z).
} Model;

/**
 * @brief Парсит данные из файла и заполняет модель.
 *
 * Эта функция читает данные о вершинах и гранях из указанного файла и 
 * заполняет структуру Model. Возвращает true, если парсинг прошел успешно,
 * и false в противном случае.
 *
 * @param filename Указатель на имя файла для чтения.
 * @param model Указатель на структуру Model, которая будет заполнена.
 * @return true Если парсинг завершился успешно, false в противном случае.
 */
bool s21_parser(const char *filename, Model *model);

/**
 * @brief Заполняет массив вершин из строки.
 *
 * Эта функция извлекает координаты вершин из строки и добавляет их в модель.
 *
 * @param model Указатель на структуру Model, в которую будут добавлены координаты.
 * @param line Указатель на строку, содержащую данные о вершине.
 * @param x Индекс для добавления данных в массив вершин.
 */
void s21_get_vector(Model *model, char *line, int x);

/**
 * @brief Заполняет информацию о грани из строки.
 *
 * Эта функция извлекает номера вершин, составляющих грань, из строки и
 * добавляет их в модель.
 *
 * @param model Указатель на структуру Model, в которую будут добавлены данные о грани.
 * @param line Указатель на строку, содержащую данные о грани.
 * @param x Индекс для добавления данных о грани.
 */
void s21_get_facet(Model *model, char *line, int x);

/**
 * @brief Освобождает ресурсы, занятые моделью.
 *
 * Эта функция очищает память, выделенную для модели, включая массивы вершин 
 * и полигонов, чтобы предотвратить утечки памяти.
 *
 * @param model Указатель на структуру Model, которую необходимо очистить.
 */
void s21_cleaner(Model *model);

// void print_model(Model model);
// void print_extremum(Model model);

#endif // PARSER_H
